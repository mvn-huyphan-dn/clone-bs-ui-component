// === RESPOND ABOVE ===
// How to use: @include respond-above(small) {}
@mixin respond-above($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// === RESPOND BELOW ===
// How to use: @include respond-below(small) {}
@mixin respond-below($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// === RESPOND BETWEEN ===
// How to use: @include respond-between(small, medium) {};
@mixin respond-between($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  } @else {
    @if (map-has-key($breakpoints, $lower) == false) {
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }
    @if (map-has-key($breakpoints, $upper) == false) {
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

// === CONVERT Px To Rem === //
// How to use: @include pxRem(font-size, 16);
@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

@function convertRootPxToEm($value) {
  // Check for null:
  @if ($value == null) {
    @return $value;
  }
  // Assume em:
  @if (unitless($value) or unit($value) == em) {
    @return 0em + $value;
  } @else {
    @return 0em + strip-units($value) / 16;
  }
}

@function convertPxToRem($px) {
  @return 0rem + strip-units($px) / 16;
}

@mixin pxRem($property, $values) {
  // Create a couple of empty lists as output buffers:
  $px-values: ();
  $rem-values: ();

  // Ensure $values is a list.
  @if type-of($values) != "list" {
    $values: join((), $values);
  }

  // Loop through the $values list:
  @each $value in $values {
    @if type-of($value) == number and (unitless($value) or unit($value) == px) {
      $px-values: join($px-values, 0px + ($value));
      $rem-values: join($rem-values, convertPxToRem($value));
    } @else {
      // No conversion:
      $px-values: join($px-values, $value);
      $rem-values: join($rem-values, $value);
    }
  }

  #{$property}: $px-values;

  // Don't add media query if it's not needed:
  @if $px-values != $rem-values {
    // @media only all {
    #{$property}: $rem-values;
    // }
  }
}

// === BUILD SPACE (margin, padding) === //
// How to use: <div class="ml-5 mr-5 mx-5 my-5 m-5"></div>
$spacePositions: ("x", "y", "*", "top", "left", "right", "bottom");
$spaceSizes: 7;
$paddingOrmargin: (
  m: "margin",
  p: "padding",
);
@mixin buildSpace($type) {
  $getType: map-get($paddingOrmargin, $type);
  @for $i from 0 to $spaceSizes {
    $size: $i * 5;
    @each $el in $spacePositions {
      @if $el == "x" {
        .#{$type}x-#{$size} {
          #{$getType}-left: #{f-pxRem($size)} !important;
          #{$getType}-right: #{f-pxRem($size)} !important;
        }
      } @else if $el == "y" {
        .#{$type}y-#{$size} {
          #{$getType}-top: #{f-pxRem($size)} !important;
          #{$getType}-bottom: #{f-pxRem($size)} !important;
        }
      } @else if $el == "*" {
        .#{$type}-#{$size} {
          #{$getType}: #{f-pxRem($size)} !important;
        }
      } @else {
        .#{$type}#{str-slice($el, 1, 1)}-#{$size} {
          #{$getType}-#{$el}: #{f-pxRem($size)} !important;
        }
      }
    }
  }
}
@include buildSpace("m"); // Margin
@include buildSpace("p"); // Padding

// BORDER-RADIUS
// stylelint-disable property-disallowed-list
// Single side border-radius

// Helper function to replace negative values with 0
@function valid-radius($radius) {
  $return: ();
  @each $value in $radius {
    @if type-of($value) == number {
      $return: append($return, max($value, 0));
    } @else {
      $return: append($return, $value);
    }
  }
  @return $return;
}

// scss-docs-start border-radius-mixins
@mixin border-radius($radius: $border-radius, $fallback-border-radius: false) {
  @if $enable-rounded {
    border-radius: valid-radius($radius);
  } @else if $fallback-border-radius != false {
    border-radius: $fallback-border-radius;
  }
}

@mixin border-top-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-top-left-radius: valid-radius($radius);
    border-top-right-radius: valid-radius($radius);
  }
}

@mixin border-end-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-top-right-radius: valid-radius($radius);
    border-bottom-right-radius: valid-radius($radius);
  }
}

@mixin border-bottom-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-bottom-right-radius: valid-radius($radius);
    border-bottom-left-radius: valid-radius($radius);
  }
}

@mixin border-start-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-top-left-radius: valid-radius($radius);
    border-bottom-left-radius: valid-radius($radius);
  }
}

@mixin border-top-start-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-top-left-radius: valid-radius($radius);
  }
}

@mixin border-top-end-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-top-right-radius: valid-radius($radius);
  }
}

@mixin border-bottom-end-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-bottom-right-radius: valid-radius($radius);
  }
}

@mixin border-bottom-start-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-bottom-left-radius: valid-radius($radius);
  }
}
// scss-docs-end border-radius-mixins

@mixin transition($transition...) {
  @if length($transition) == 0 {
    $transition: $transition-base;
  }

  @if length($transition) > 1 {
    @each $value in $transition {
      @if $value == null or $value == none {
        @warn "The keyword 'none' or 'null' must be used as a single argument.";
      }
    }
  }

  @if $enable-transitions {
    @if nth($transition, 1) != null {
      transition: $transition;
    }

    @if $enable-reduced-motion and
      nth($transition, 1) !=
      null and
      nth($transition, 1) !=
      none
    {
      @media (prefers-reduced-motion: reduce) {
        transition: none;
      }
    }
  }
}

//
@mixin txt-bg-color($color) {
  color: shade-color($color, 30%);
  background-color: tint-color($color, 90%);
  border-color: $color;
}

// POSITION CLASSES

@function time-percent($number) {
  @return $number * 1%;
}

$positionList: (
  top: top,
  bottom: bottom,
  left: left,
  right: right,
);

@each $key, $value in $positionList {
  @for $i from 0 through 100 {
    .#{$key}-#{$i} {
      #{$value}: time-percent($i) !important;
    }
  }
}

$cloneColor: (
  primary: #0d6efd,
  secondary: #777,
  danger: #dc3545,
  warning: #ffc107,
  success: #198754,
  info: #0dcaf0,
);

$class-prefix: (
  background-color: bg-color,
  // color: color,
  color: text,
);

@each $key, $value in $cloneColor {
  @each $key2, $value2 in $class-prefix {
    .#{$value2}-#{$key} {
      #{$key2}: $value !important;
      .card-header {
        background-color: $value !important;
      }
    }
    .border-#{$key} {
      border-color: $value !important;
    }
  }
}

@for $i from 0 through 100 {
  @for $j from 0 through 100 {
    .translate-#{$i}-#{$j} {
      transform: translate(-$i * 1%, -$j * 1%) !important;
    }
  }
}

// BORDER RADIUS CLASS
$border-radius-list: (
  pill: 50rem,
  circle: 50%,
);

@each $key, $value in $border-radius-list {
  .br-#{$key} {
    border-radius: $value !important;
  }
}

@for $i from 1 through 100 {
  .br-#{$i} {
    border-radius: 0.25rem * $i !important;
  }
}

// Padding
@for $i from 1 through 100 {
  .p-#{$i} {
    padding: 0.25rem * $i !important;
  }
}

// Component prefix class
$component-prefix-list: (btn);

@each $value in $component-prefix-list {
  @each $key2, $value2 in $cloneColor {
    .#{$value}-#{$key2} {
      background-color: $value2 !important;
      border-color: $value2 !important;
      &:hover {
        background-color: shade-color($value2, 20%) !important;
        border-color: shade-color($value2, 20%) !important;
      }
      &:focus {
        box-shadow: 0 0 0 0.25rem tint-color($value2, 50%);
      }
      &.disabled {
        background-color: $value2;
        border-color: $value2 !important;
        opacity: 0.65;
        pointer-events: none;
        &:hover {
          background-color: $value2 !important;
          border-color: unset;
        }
        &:focus {
          box-shadow: unset;
        }
      }
      &.active {
        background-color: shade-color($value2, 20%) !important;
        border-color: shade-color($value2, 20%) !important;
      }
    }
    .#{$value}-outline-#{$key2} {
      background-color: transparent;
      color: $value2 !important;
      border-color: $value2 !important;
      &:hover {
        background-color: $value2 !important;
        color: map-get($map: $colors, $key: white) !important;
      }
      &:focus {
        box-shadow: 0 0 0 0.25rem tint-color($value2, 50%);
      }
    }
  }
}

//Caret
// scss-docs-start caret-mixins
$enable-caret: true;
$caret-vertical-align: middle; 
// 0.255em;
$caret-spacing: 0.255em;
$caret-width: 0.3em;
@mixin caret-down {
  border-top: $caret-width solid;
  border-right: $caret-width solid transparent;
  border-bottom: 0;
  border-left: $caret-width solid transparent;
}

@mixin caret-up {
  border-top: 0;
  border-right: $caret-width solid transparent;
  border-bottom: $caret-width solid;
  border-left: $caret-width solid transparent;
}

@mixin caret-end {
  border-top: $caret-width solid transparent;
  border-right: 0;
  border-bottom: $caret-width solid transparent;
  border-left: $caret-width solid;
}

@mixin caret-start {
  border-top: $caret-width solid transparent;
  border-right: $caret-width solid;
  border-bottom: $caret-width solid transparent;
}

@mixin caret($direction: down) {
  @if $enable-caret {
    &::after {
      display: inline-block;
      margin-left: $caret-spacing;
      vertical-align: $caret-vertical-align;
      content: "";
      @if $direction == down {
        @include caret-down();
      } @else if $direction == up {
        @include caret-up();
      } @else if $direction == end {
        @include caret-end();
      }
    }

    @if $direction == start {
      &::after {
        display: none;
      }

      &::before {
        display: inline-block;
        margin-right: $caret-spacing;
        vertical-align: $caret-vertical-align;
        content: "";
        @include caret-start();
      }
    }

    &:empty::after {
      margin-left: 0;
    }
  }
}
// scss-docs-end caret-mixins
